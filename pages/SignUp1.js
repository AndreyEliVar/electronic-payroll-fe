/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import {
    TextField,
    Button,
    MenuItem,
    InputAdornment,
    IconButton,
} from "@mui/material";
import VisibilityIcon from "@mui/icons-material/Visibility";
import { styled } from "@mui/material/styles";
import Link from "next/link";
import { sub } from "date-fns";
import { useState } from "react";
import { Tooltip } from "@mui/material";
import { getSelectUnstyledUtilityClass } from "@mui/base";

const StateNormal = styled("div")({
    backgroundColor: `rgba(255, 255, 255, 1)`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    width: `100%`,
    height: `944px`,
    justifyContent: `center`,
    alignItems: `flex-start`,
    padding: `0px 662px 69px 662px`,
    boxSizing: `border-box`,
    // overflow: `hidden`,
});

const SignUpForm = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `center`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `0px`,
    // overflow: `hidden`,
    zIndex: `1`,
});

const FormHeader = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px`,
});

const Logo = styled("img")({
    height: `62.23px`,
    width: `341.69px`,
    margin: `0px`,
});

const Regístrate = styled("div")({
    textAlign: `center`,
    whiteSpace: `pre-wrap`,
    color: `rgba(0, 0, 0, 1)`,
    fontStyle: `normal`,
    fontFamily: `Heebo`,
    fontWeight: `800`,
    fontSize: `34px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    textTransform: `none`,
    margin: `30px 0px 0px 0px`,
});

const Name = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `20px 0px 0px 0px`,
});

const TextFieldOutlined = styled(TextField)({
    width: `342px`,
    margin: `0px`,
});

const Id = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    height: `56px`,
    width: `342px`,
    margin: `20px 0px 0px 0px`,
});

const TextFieldOutlined1 = styled(TextField)({
    width: `124px`,
    margin: `0px`,
});

const IdInput = styled(TextField)({
    width: `188px`,
    margin: `0px 0px 0px 30px`,
});

const Phone = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `20px 0px 0px 0px`,
});

const TextFieldOutlined3 = styled(TextField)({
    width: `342px`,
    margin: `0px`,
});

const Email = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `20px 0px 0px 0px`,
});

const TextFieldOutlined4 = styled(TextField)({
    width: `342px`,
    margin: `0px`,
});

const Password = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `20px 0px 0px 0px`,
});

const TextFieldOutlined5 = styled(TextField)({
    width: `342px`,
    margin: `0px`,
});

const ConfirmPassword = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `20px 0px 0px 0px`,
});

const TextFieldOutlined6 = styled(TextField)({
    width: `342px`,
    margin: `0px`,
});

const FormFooter = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    alignSelf: `stretch`,
    margin: `20px 0px 0px 0px`,
});

const ButtonContained = styled(Button)({
    alignSelf: `stretch`,
    margin: `0px`,
});

const Link1 = styled("div")({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `24px 0px 0px 0px`,
    cursor: `pointer`,
});

const LinkTitle = styled("div")(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(25, 118, 210, 1)`,
    fontStyle: `normal`,
    fontFamily: `Roboto`,
    fontWeight: `400`,
    fontSize: `16px`,
    letterSpacing: `0.15000000596046448px`,
    textDecoration: `none`,
    lineHeight: `150%`,
    textTransform: `none`,
    margin: `0px`,
}));

function SignUpPollolandia() {
    const [completeInfo, setCompleteInfo] = useState(false);
    const [name, setName] = useState("");
    const [phone, setPhone] = useState(0);
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [id, setId] = useState("");
    const [idLength, setIdLength] = useState(0);
    const [isValidId, setIsValidId] = useState(true);
    const [isValidName, setIsValidName] = useState(true);
    const [isValidPhone, setIsValidPhone] = useState(true);
    const [isValidEmail, setIsValidEmail] = useState(true);
    const [isValidPassword, setIsValidPassword] = useState(true);
    const [isValidConfirmPassword, setIsValidConfirmPassword] = useState(true);

    const submitInfo = () => {
        setCompleteInfo(true);
        console.log(completeInfo);
        /*const info = {
            id: event.target.Cedula.value,
            email: event.target.Email.value,
            phoneNumber: event.target.Teléfono.value,
            name: event.target.Nombre.value,
            password: event.target.Contraseña.value,
            confirmPassword: event.target["Confirmar Contraseña"].value,
        };
        if (info) {
            if (info.password == info.confirmPassword) {
                if (!passwords) {
                    verifyPasswords();
                }
                verifySubmittedInfo();
                sendData(info);
            } else {
                unVerifyPasswords();
            }
        }*/
    };

    const setIdType = (event) => {
        setId(event.target.value);
        if(event.target.value === "Cédula"){
            setIdLength(9);
        } else {
            setIdLength(12);
        }
    }
    const handleIdChange = (event) => {

    }

    return (
        <StateNormal>
            <SignUpForm>
                <FormHeader>
                    <Logo src="/assets/img/Logo.png" alt={"Logo"} />
                    <Regístrate>{`Regístrate`}</Regístrate>
                </FormHeader>
                <Name>
                    <TextFieldOutlined
                        variant="outlined"
                        size="medium"
                        label={`Nombre`}
                        type="text"
                        required={true}
                    />
                </Name>
                <Id>
                    <TextFieldOutlined1
                        variant="outlined"
                        size="medium"
                        label={`Tipo`}
                        onChange={setIdType}
                        select
                    >
                        <MenuItem value={`Id`}>{`Cédula`}</MenuItem>
                        <MenuItem value={`Dimex`}>{`DIMEX`}</MenuItem>
                    </TextFieldOutlined1>
                    <IdInput
                        variant="outlined"
                        size="medium"
                        label={`Identificación`}
                        type="number"
                        onChange={handleIdChange}
                        error={!isValidId}
                        required={true}
                    />
                </Id>
                <Phone>
                    <TextFieldOutlined3
                        variant="outlined"
                        size="medium"
                        label={`Teléfono`}
                        type="number"
                        required={true}
                    />
                </Phone>
                <Email>
                    <TextFieldOutlined4
                        variant="outlined"
                        size="medium"
                        label={`Correo`}
                        type="email"
                        required={true}
                    />
                </Email>
                <Password>
                    <TextFieldOutlined5
                        variant="outlined"
                        size="medium"
                        label={`Contraseña`}
                        type="password"
                        required={true}
                        InputProps={{
                            endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="default">
                                        <VisibilityIcon color="action" />
                                    </IconButton>
                                </InputAdornment>
                            ),
                        }}
                    />
                </Password>
                <ConfirmPassword>
                    <TextFieldOutlined6
                        variant="outlined"
                        size="medium"
                        label={`Confirmar contraseña`}
                        type="password"
                        required={true}
                        InputProps={{
                            endAdornment: (
                                <InputAdornment position="end">
                                    <IconButton color="default">
                                        <VisibilityIcon color="action" />
                                    </IconButton>
                                </InputAdornment>
                            ),
                        }}
                    />
                </ConfirmPassword>
                <FormFooter>
                    <ButtonContained
                        variant="contained"
                        size="large"
                        color="primary"
                        type="submit"
                        onClick={() => submitInfo()}
                    >
                        {" "}
                        Registrarse{" "}
                    </ButtonContained>
                    <Link1>
                        <Link href="/LogIn">
                            <LinkTitle>
                                {`¿Ya tienes cuenta? Inicia sesión`}
                            </LinkTitle>
                        </Link>
                    </Link1>
                </FormFooter>
            </SignUpForm>
        </StateNormal>
    );
}

export default SignUpPollolandia;
