
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Aplica_bScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  fechaHora: 'fechaHora',
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  nombreBeneficio: 'nombreBeneficio'
});

exports.Prisma.Aplica_doScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  fechaHora: 'fechaHora',
  nombreDO: 'nombreDO'
});

exports.Prisma.Aplica_dvScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  fechaHora: 'fechaHora',
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  nombreDeduccion: 'nombreDeduccion'
});

exports.Prisma.BeneficiosScalarFieldEnum = makeEnum({
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  nombreBeneficio: 'nombreBeneficio',
  montoPago: 'montoPago',
  descripcion: 'descripcion',
  habilitado: 'habilitado'
});

exports.Prisma.CredencialesScalarFieldEnum = makeEnum({
  email: 'email',
  contrasenna: 'contrasenna',
  verificado: 'verificado'
});

exports.Prisma.DeduccionObligatoriaScalarFieldEnum = makeEnum({
  nombre: 'nombre',
  porcentaje: 'porcentaje'
});

exports.Prisma.DeduccionVoluntariaScalarFieldEnum = makeEnum({
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  nombreDeduccion: 'nombreDeduccion',
  descripcion: 'descripcion',
  monto: 'monto',
  habilitado: 'habilitado'
});

exports.Prisma.EmpleadoScalarFieldEnum = makeEnum({
  cedula: 'cedula',
  cedulaJuridica: 'cedulaJuridica'
});

exports.Prisma.EmpleadorScalarFieldEnum = makeEnum({
  cedula: 'cedula'
});

exports.Prisma.EmpresaScalarFieldEnum = makeEnum({
  cedulaJuridica: 'cedulaJuridica',
  direccion: 'direccion',
  razonSocial: 'razonSocial',
  email: 'email',
  habilitado: 'habilitado',
  cedulaEmpleador: 'cedulaEmpleador',
  telefono: 'telefono'
});

exports.Prisma.EscogeScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  nombreDeduccion: 'nombreDeduccion',
  aporte: 'aporte'
});

exports.Prisma.EsContratadoScalarFieldEnum = makeEnum({
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  cedulaEmpleado: 'cedulaEmpleado',
  tipoEmpleado: 'tipoEmpleado',
  puesto: 'puesto',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  jornada: 'jornada',
  salario: 'salario'
});

exports.Prisma.GeneraScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  fechaHora: 'fechaHora',
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto'
});

exports.Prisma.Hace_usoScalarFieldEnum = makeEnum({
  cedula: 'cedula',
  email: 'email'
});

exports.Prisma.PagoScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  fechaHora: 'fechaHora',
  deduccionesEmpleado: 'deduccionesEmpleado',
  deduccionesPatrono: 'deduccionesPatrono',
  salarioBruto: 'salarioBruto',
  beneficios: 'beneficios',
  salarioNeto: 'salarioNeto',
  deduccionesVoluntarias: 'deduccionesVoluntarias'
});

exports.Prisma.PersonaScalarFieldEnum = makeEnum({
  cedula: 'cedula',
  nombre: 'nombre',
  telefono: 'telefono'
});

exports.Prisma.ProyectoScalarFieldEnum = makeEnum({
  cedulaJuridica: 'cedulaJuridica',
  nombre: 'nombre',
  cantidadMaximaBeneficios: 'cantidadMaximaBeneficios',
  montoMaximoBeneficio: 'montoMaximoBeneficio',
  frecuenciaPago: 'frecuenciaPago',
  moneda: 'moneda',
  fechaInicio: 'fechaInicio',
  habilitado: 'habilitado',
  fechaFin: 'fechaFin',
  fechaUltimoPago: 'fechaUltimoPago'
});

exports.Prisma.ReporteHorasScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  cedulaEmpleador: 'cedulaEmpleador',
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  fechaHora: 'fechaHora',
  horasTrabajadas: 'horasTrabajadas',
  estado: 'estado'
});

exports.Prisma.SeleccionaScalarFieldEnum = makeEnum({
  cedulaEmpleado: 'cedulaEmpleado',
  cedulaJuridica: 'cedulaJuridica',
  nombreProyecto: 'nombreProyecto',
  nombreBeneficio: 'nombreBeneficio'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  aplica_b: 'aplica_b',
  aplica_do: 'aplica_do',
  aplica_dv: 'aplica_dv',
  beneficios: 'beneficios',
  credenciales: 'credenciales',
  deduccionObligatoria: 'deduccionObligatoria',
  deduccionVoluntaria: 'deduccionVoluntaria',
  empleado: 'empleado',
  empleador: 'empleador',
  empresa: 'empresa',
  escoge: 'escoge',
  esContratado: 'esContratado',
  genera: 'genera',
  hace_uso: 'hace_uso',
  pago: 'pago',
  persona: 'persona',
  proyecto: 'proyecto',
  reporteHoras: 'reporteHoras',
  selecciona: 'selecciona'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
